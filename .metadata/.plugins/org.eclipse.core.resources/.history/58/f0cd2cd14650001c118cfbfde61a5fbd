package com.pratmodi.one;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

public class SubArrays {

	public static void main(String[] args) {
		int[] array = {1, -2, 4, -5, 1};
		int[] subArray = new int[array.length];
//		numberOfNegativeSums(array);
//		findArrayIndex(subArray, array);
		numberOfNegativeSum(array);
	}

	
	public static int numberOfNegativeSums(int[] array) {
		try {
		int sum = Integer.MIN_VALUE;
		List<Integer> list = new ArrayList<Integer>(array.length);
		int[] subArray = new int[array.length];
		int subArrayElements = 0;
		for(int i=0;i<array.length;i++) {
//			subArrayElements+=array[i];
//			subArray[i]=subArrayElements;
//			
			list.add(i, array[i]);
		}
		int sum2 = 0;
		for(int j=0;j<list.size();j++) {
			if(j+1<list.size()) {
			 sum2= list.get(j)+list.get(j+1);
			}
			if(sum2<0) {
				return sum2;
			}
		}
		}catch (NullPointerException e) {
			e.printStackTrace();
		}
		return 0;
		
	}
	
	public static int findArrayIndex(int[] subArray, int[] parentArray) {
		if (subArray.length == 0) {
			return -1;
		}
		int sL = subArray.length;
		int l = parentArray.length - subArray.length;
		int k = 0;
		for (int i = 0; i < l; i++) {
			if (parentArray[i] == subArray[k]) {
				for (int j = 0; j < subArray.length; j++) {
					if (parentArray[i + j] == subArray[j]) {
						sL--;
						if (sL == 0) {
							return i;
						}

					}

				}
			}

		}
		return -1;
	}
	
	public static<T> int[] subArray(int[] array, int beg, int end) {
        return Arrays.copyOfRange(array, beg, end+1);
    }
	
	public static void numberOfNegativeSum(int[] array) {
		List<Integer> list = new ArrayList<Integer>();
		for(int beg=0;beg<array.length;beg++) {
			int end=0;
			int[] array2;
			
			for(end=beg+1;end<array.length;end++) {
				array2 = subArray(array, beg, end);
				
			}
			list.add(beg, array[beg]);
		}
		Iterator i = list.listIterator();
			while(i.hasNext()) {
				System.out.println("Subarrays in list: "+i.next());
			}
		
	}
	
}
