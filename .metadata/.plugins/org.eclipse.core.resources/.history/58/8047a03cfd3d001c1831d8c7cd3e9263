package com.karumanchi.doublylinkedlist;

import com.karumanchi.intro.DLLNode;

public class DoublyLinkedList {

	private DLLNode head;
	private DLLNode tail;
	private int length;
	
	public DoublyLinkedList() {
		head = new DLLNode(Integer.MIN_VALUE, null, null);
		tail = new DLLNode(Integer.MIN_VALUE, head, null);
		head.setNext(tail);
		length=0;
	}
	
//Get the value at a given position..	
	public int get(int position) {
		return Integer.MIN_VALUE;
	}
	
//Find the position of the head value that is equal to a given value.
//The equals method is used to determine equality.
	public int getPosition(int data) {
	//go looking for the data
		DLLNode temp = head;
		int pos =0;
		while(temp!=null) {
			if(temp.getData()==data) {
				return pos;
			}
			pos += 1;
			temp = temp.getNext();
		}
		
	//else return some large value
		return Integer.MIN_VALUE;
	}
	
//Return the current length of the DLL.
	public int length() {
		return length;
	}
	
//Add a new value to the front of the list..
	public void insert(int newValue) {
		DLLNode newNode = new DLLNode(newValue, null,head.getNext());
		newNode.getNext().setPrev(newNode);
		head = newNode;
		length +=1;
	}
	
//Add a new value to the list at a given position..
//All values at that position to the end move over to make room
	public void insert(int data, int position) {
		
	}
}
