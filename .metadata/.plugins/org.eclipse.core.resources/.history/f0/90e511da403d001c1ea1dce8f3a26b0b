package com.karumanchi.linkedlist;

import com.karumanchi.intro.ListNode;

public class LinkedList {
	ListNode head;
	private int length = 0;

	public LinkedList() {
		super();
		length = 0;
	}

	public ListNode getHead() {
		return head;
	}

	public void setHead(ListNode head) {
		this.head = head;
	}

	public int getLength() {
		return length;
	}

	public void setLength(int length) {
		this.length = length;
	}

//Insert a node at the beginning of the list..
	public synchronized void insertAtBegin(ListNode node) {
		node.setNext(head);
		head = node;
		length++;
	}

//Insert a node at the end of the list..
	public synchronized void insertAtEnd(ListNode node) {
		if (head == null)
			head = node;
		else {
			ListNode p,q;
			for(p=head;(q=p.getNext())!=null;p=q)
				p.setNext(node);
			node.setNext(null);
		}
		length++;
	}
	
//Add a new value to the list at a given position..
	public void insert(int data, int position) {
		
	//fix the position
		if(position<0)
			position=0;
		else if(position>length)
			position=length;
		
	//If the list is empty, make it be the only element..
		if(head==null)
			head = new ListNode(data);
		
	//IF adding at the front of the list..
		else if(position==0) {
			ListNode temp = new ListNode(data);
			temp.setNext(head); 
			head = temp;
		}
		
	//Else find the corrent position and insert
		else {
			ListNode temp = head;
			for(int i=1;i<position;i+=1) { 
				temp = temp.getNext();
			}
			ListNode newNode = new ListNode(data);
			newNode.setNext(temp.getNext()); // is this same as newNode.next = temp.next; ?
			temp.setNext(newNode);
		}
		length +=1;
	}
	
//Remove and return the node at the head of the list..
	public synchronized ListNode removeNodeAtHead() {
		ListNode node = head;
		if(node!=null) {
			head = node.getNext();
			node.setNext(null); // why set to null?
		}
		return node;
	}
	
//Remove and return the node at the end of the list..	
	public synchronized ListNode removeNodeAtEnd() {
		if(head==null) {
			return null;
		}
		ListNode p = head, q =null, next = head.getNext();
		if(next==null) {
			head=null;
			return p;
		}
		 while((next=p.getNext())!=null) { //is this loop same as -> for(p=head;next.getNext()!=null;p.getNext())
			q=p;
			p=next;
		}
		q.setNext(null);
		return p;
		
	}
	
//Remove a node matching the speicified node from the list..
	public synchronized void removeMatched(ListNode node) {
		ListNode p,q = null;
		p=head;
		if(node.getNext()==null) {
			head=node;
			head=null;
			length=0;
		}else {
			for(p=head;q.getNext()==node;p=q) {
				
			}
		}
	}
	
}

